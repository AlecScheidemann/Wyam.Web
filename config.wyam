Settings[Keys.Host] = "wyam.io";
Settings[Keys.LinksUseHttps] = true;
Settings[DocsKeys.Title] = "Wyam";
Settings[DocsKeys.Logo] = "/assets/img/logo.png";
Settings[DocsKeys.SourceFiles] = null;
Settings[DocsKeys.ProjectFiles] = "../release/repo/src/**/{!Wyam.Windows,!Cake.Wyam,*}.csproj";
Settings[DocsKeys.BaseEditUrl] = "https://github.com/Wyamio/Wyam.Web/tree/master/input/";
Settings[DocsKeys.NetlifyRedirects] = true;
Settings[DocsKeys.ImplicitInheritDoc] = true;

public class KeysModel
{
    public string TargetType { get; set; }
    public string Usage { get; set; } // If null, type will be scanned for const fields, otherwise <metadata> comments will be used
    public bool AlphaSort { get; set; }
    public string Intro { get; set; }

    public KeysModel(string targetType, string usage, bool alphaSort = true)
    {
        TargetType = targetType;
        Usage = usage;
        AlphaSort = alphaSort;
    }

    public KeysModel(string targetType, bool alphaSort = true)
        : this(targetType, null, alphaSort)
    {        
    }
}

Pipelines.InsertBefore(Docs.RenderPages, "Modules",
    Execute(ctx =>
	    AnalyzeCSharp()
            .WithAssemblies(ctx.List<string>(DocsKeys.AssemblyFiles))
            .WithProjects(ctx.List<string>(DocsKeys.ProjectFiles))
            .WithNamedTypes(x => x.AllInterfaces.Any(y => y.Name == "IModule") && !x.IsAbstract)
            .WhereNamespaces(x => !x.StartsWith("Wyam.Testing"))
            .WherePublic()
            .WithDocsForImplicitSymbols()
            .WithWritePath(x => {
                string name = x.String("DisplayName").ToLower();
                if(name == "index")
                {
                    name = "indx";  // Special case for the Index module
                }
                
                // Remove generic types
                int genericParamsIndex = name.IndexOf("<");
                if(genericParamsIndex != -1)
                {
                    name = name.Substring(0, genericParamsIndex);
                }
                
                return new FilePath($"modules/{name}.html");
            })
    ),
    Branch(
        SearchIndex(new SearchIndexItem(
            @ctx.GetLink(@doc), 
            @doc.String(CodeAnalysisKeys.DisplayName), 
            @doc.String(CodeAnalysisKeys.DisplayName))
        )
            .WithScript((scriptBuilder, context) =>
            {
                // Use a custom tokenizer that splits on camel case characters
                // https://github.com/olivernn/lunr.js/issues/230#issuecomment-244790648
                scriptBuilder.Insert(0, @"
var camelCaseTokenizer = function (obj) {
    var previous = '';
    return obj.toString().trim().split(/[\s\-]+|(?=[A-Z])/).reduce(function(acc, cur) {
        var current = cur.toLowerCase();
        if(acc.length === 0) {
            previous = current;
            return acc.concat(current);
        }
        previous = previous.concat(current);
        return acc.concat([current, previous]);
    }, []);
}
lunr.tokenizer.registerFunction(camelCaseTokenizer, 'camelCaseTokenizer')");
                scriptBuilder.Replace("this.ref('id');", @"this.ref('id');
        this.tokenizer(camelCaseTokenizer);");
                return scriptBuilder.ToString();
            })
            .WithPath("assets/js/modulesSearchIndex.js"),
        WriteFiles()        
    ),
	Razor().WithLayout("/_ModulesLayout.cshtml"),
    Headings(),
    HtmlInsert("div#infobar-headings", @ctx.GenerateInfobarHeadings(@doc)),
	WriteFiles()
);